{"ast":null,"code":"\"use strict\";\n\nvar logger = require(\"../logger\").logger;\n/**\n * $ browser-sync recipe <name> <options>\n *\n * This command will copy a recipe into either the current directory\n * or one given with the --output flag\n *\n * @param opts\n * @returns {Function}\n */\n\n\nmodule.exports = function (opts) {\n  var path = require(\"path\");\n\n  var fs = require(\"fs-extra\");\n\n  var input = opts.cli.input.slice(1);\n\n  var resolved = require.resolve(\"bs-recipes\");\n\n  var dir = path.dirname(resolved);\n\n  var logRecipes = function () {\n    var dirs = fs.readdirSync(path.join(dir, \"recipes\"));\n    logger.info(\"Install one of the following with {cyan:browser-sync recipe <name>\\n\");\n    dirs.forEach(function (name) {\n      console.log(\"    \" + name);\n    });\n  };\n\n  if (!input.length) {\n    logger.info(\"No recipe name provided!\");\n    logRecipes();\n    return opts.cb();\n  }\n\n  if (opts.cli.input[1] === \"ls\") {\n    logRecipes();\n    return opts.cb();\n  }\n\n  input = input[0];\n  var flags = opts.cli.flags;\n  var output = flags.output ? path.resolve(flags.output) : path.join(process.cwd(), input);\n  var targetDir = path.join(dir, \"recipes\", input);\n\n  if (fs.existsSync(output)) {\n    return opts.cb(new Error(\"Target folder exists remove it first and then try again\"));\n  }\n\n  if (fs.existsSync(targetDir)) {\n    fs.copy(targetDir, output, function (err) {\n      if (err) {\n        opts.cb(err);\n      } else {\n        logger.info(\"Recipe copied into {cyan:%s}\", output);\n        logger.info(\"Next, inside that folder, run {cyan:npm i && npm start}\");\n        opts.cb(null);\n      }\n    });\n  } else {\n    logger.info(\"Recipe {cyan:%s} not found. The following are available though\", input);\n    logRecipes();\n    opts.cb();\n  }\n};","map":{"version":3,"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,MAAlC;AAEA;;;;;;;;;;;AASAE,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAa;EAC1B,IAAIC,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;EACA,IAAIK,EAAE,GAAGL,OAAO,CAAC,UAAD,CAAhB;;EACA,IAAIM,KAAK,GAAGH,IAAI,CAACI,GAAL,CAASD,KAAT,CAAeE,KAAf,CAAqB,CAArB,CAAZ;;EACA,IAAIC,QAAQ,GAAGT,OAAO,CAACU,OAAR,CAAgB,YAAhB,CAAf;;EACA,IAAIC,GAAG,GAAGP,IAAI,CAACQ,OAAL,CAAaH,QAAb,CAAV;;EAEA,IAAII,UAAU,GAAG;IACb,IAAIC,IAAI,GAAGT,EAAE,CAACU,WAAH,CAAeX,IAAI,CAACY,IAAL,CAAUL,GAAV,EAAe,SAAf,CAAf,CAAX;IACAZ,MAAM,CAACkB,IAAP,CACI,sEADJ;IAGAH,IAAI,CAACI,OAAL,CAAa,UAASC,IAAT,EAAa;MACtBC,OAAO,CAACC,GAAR,CAAY,SAASF,IAArB;IACH,CAFD;EAGH,CARD;;EAUA,IAAI,CAACb,KAAK,CAACgB,MAAX,EAAmB;IACfvB,MAAM,CAACkB,IAAP,CAAY,0BAAZ;IACAJ,UAAU;IACV,OAAOV,IAAI,CAACoB,EAAL,EAAP;EACH;;EAED,IAAIpB,IAAI,CAACI,GAAL,CAASD,KAAT,CAAe,CAAf,MAAsB,IAA1B,EAAgC;IAC5BO,UAAU;IACV,OAAOV,IAAI,CAACoB,EAAL,EAAP;EACH;;EAEDjB,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAb;EACA,IAAIkB,KAAK,GAAGrB,IAAI,CAACI,GAAL,CAASiB,KAArB;EACA,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAN,GACPrB,IAAI,CAACM,OAAL,CAAac,KAAK,CAACC,MAAnB,CADO,GAEPrB,IAAI,CAACY,IAAL,CAAUU,OAAO,CAACC,GAAR,EAAV,EAAyBrB,KAAzB,CAFN;EAGA,IAAIsB,SAAS,GAAGxB,IAAI,CAACY,IAAL,CAAUL,GAAV,EAAe,SAAf,EAA0BL,KAA1B,CAAhB;;EAEA,IAAID,EAAE,CAACwB,UAAH,CAAcJ,MAAd,CAAJ,EAA2B;IACvB,OAAOtB,IAAI,CAACoB,EAAL,CACH,IAAIO,KAAJ,CAAU,yDAAV,CADG,CAAP;EAGH;;EAED,IAAIzB,EAAE,CAACwB,UAAH,CAAcD,SAAd,CAAJ,EAA8B;IAC1BvB,EAAE,CAAC0B,IAAH,CAAQH,SAAR,EAAmBH,MAAnB,EAA2B,UAASO,GAAT,EAAY;MACnC,IAAIA,GAAJ,EAAS;QACL7B,IAAI,CAACoB,EAAL,CAAQS,GAAR;MACH,CAFD,MAEO;QACHjC,MAAM,CAACkB,IAAP,CAAY,8BAAZ,EAA4CQ,MAA5C;QACA1B,MAAM,CAACkB,IAAP,CACI,yDADJ;QAGAd,IAAI,CAACoB,EAAL,CAAQ,IAAR;MACH;IACJ,CAVD;EAWH,CAZD,MAYO;IACHxB,MAAM,CAACkB,IAAP,CACI,gEADJ,EAEIX,KAFJ;IAIAO,UAAU;IACVV,IAAI,CAACoB,EAAL;EACH;AACJ,CA7DD","names":["logger","require","module","exports","opts","path","fs","input","cli","slice","resolved","resolve","dir","dirname","logRecipes","dirs","readdirSync","join","info","forEach","name","console","log","length","cb","flags","output","process","cwd","targetDir","existsSync","Error","copy","err"],"sources":["../../lib/cli/command.recipe.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}