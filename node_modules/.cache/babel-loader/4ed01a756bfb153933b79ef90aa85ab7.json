{"ast":null,"code":"\"use strict\";\n\nvar path = require(\"path\");\n\nvar micromatch = require(\"micromatch\");\n\nvar utils = require(\"./public-utils\");\n/**\n * @param emitter\n * @returns {Function}\n */\n\n\nmodule.exports = function (emitter) {\n  /**\n   * Return a transform/through stream that listens to file\n   * paths and fires internal Browsersync events.\n   * @param {{once: boolean, match: string|array}} [opts]\n   * @returns {Stream.Transform}\n   */\n  function browserSyncThroughStream(opts) {\n    opts = opts || {};\n    var emitted = false;\n\n    var Transform = require(\"stream\").Transform;\n\n    var reload = new Transform({\n      objectMode: true\n    });\n    var changed = [];\n\n    reload._transform = function (file, encoding, next) {\n      var stream = this;\n      /**\n       * End is always called to send the current file down\n       * stream. Browsersync never acts upon a stream,\n       * we only `listen` to it.\n       */\n\n      function end() {\n        stream.push(file); // always send the file down-stream\n\n        next();\n      }\n      /**\n       * If {match: <pattern>} was provided, test the\n       * current filepath against it\n       */\n\n\n      if (opts.match) {\n        if (!micromatch(file.path, opts.match, {\n          dot: true\n        }).length) {\n          return end();\n        }\n      }\n      /**\n       * if {once: true} provided, emit the reload event for the\n       * first file only\n       */\n\n\n      if (opts.once === true && !emitted) {\n        utils.emitBrowserReload(emitter);\n        emitted = true;\n      } else {\n        // handle multiple\n        if (opts.once === true && emitted) {} else {\n          if (file.path) {\n            emitted = true;\n            utils.emitChangeEvent(emitter, file.path, false);\n            changed.push(path.basename(file.path));\n          }\n        }\n      }\n\n      end();\n    };\n    /**\n     * When this current operation has finished, emit the\n     * steam:changed event so that any loggers can pick up it\n     * @param next\n     * @private\n     */\n\n\n    reload._flush = function (next) {\n      if (changed.length) {\n        utils.emitStreamChangedEvent(emitter, changed);\n      }\n\n      next();\n    };\n\n    return reload;\n  }\n\n  return browserSyncThroughStream;\n};","map":{"version":3,"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;AAIAG,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAgB;EAC7B;;;;;;EAMA,SAASC,wBAAT,CAAkCC,IAAlC,EAAsC;IAClCA,IAAI,GAAGA,IAAI,IAAI,EAAf;IACA,IAAIC,OAAO,GAAG,KAAd;;IACA,IAAIC,SAAS,GAAGT,OAAO,CAAC,QAAD,CAAP,CAAkBS,SAAlC;;IACA,IAAIC,MAAM,GAAG,IAAID,SAAJ,CAAc;MAAEE,UAAU,EAAE;IAAd,CAAd,CAAb;IACA,IAAIC,OAAO,GAAG,EAAd;;IAEAF,MAAM,CAACG,UAAP,GAAoB,UAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,EAA6B;MAC7C,IAAIC,MAAM,GAAG,IAAb;MAEA;;;;;;MAKA,SAASC,GAAT,GAAY;QACRD,MAAM,CAACE,IAAP,CAAYL,IAAZ,EADQ,CACW;;QACnBE,IAAI;MACP;MAED;;;;;;MAIA,IAAIT,IAAI,CAACa,KAAT,EAAgB;QACZ,IAAI,CAACnB,UAAU,CAACa,IAAI,CAACf,IAAN,EAAYQ,IAAI,CAACa,KAAjB,EAAwB;UAAEC,GAAG,EAAE;QAAP,CAAxB,CAAV,CAAiDC,MAAtD,EAA8D;UAC1D,OAAOJ,GAAG,EAAV;QACH;MACJ;MAED;;;;;;MAIA,IAAIX,IAAI,CAACgB,IAAL,KAAc,IAAd,IAAsB,CAACf,OAA3B,EAAoC;QAChCN,KAAK,CAACsB,iBAAN,CAAwBnB,OAAxB;QAEAG,OAAO,GAAG,IAAV;MACH,CAJD,MAIO;QACH;QAEA,IAAID,IAAI,CAACgB,IAAL,KAAc,IAAd,IAAsBf,OAA1B,EAAmC,CAClC,CADD,MACO;UACH,IAAIM,IAAI,CAACf,IAAT,EAAe;YACXS,OAAO,GAAG,IAAV;YACAN,KAAK,CAACuB,eAAN,CAAsBpB,OAAtB,EAA+BS,IAAI,CAACf,IAApC,EAA0C,KAA1C;YACAa,OAAO,CAACO,IAAR,CAAapB,IAAI,CAAC2B,QAAL,CAAcZ,IAAI,CAACf,IAAnB,CAAb;UACH;QACJ;MACJ;;MAEDmB,GAAG;IACN,CA7CD;IA+CA;;;;;;;;IAMAR,MAAM,CAACiB,MAAP,GAAgB,UAASX,IAAT,EAAa;MACzB,IAAIJ,OAAO,CAACU,MAAZ,EAAoB;QAChBpB,KAAK,CAAC0B,sBAAN,CAA6BvB,OAA7B,EAAsCO,OAAtC;MACH;;MAEDI,IAAI;IACP,CAND;;IAQA,OAAON,MAAP;EACH;;EAED,OAAOJ,wBAAP;AACH,CA/ED","names":["path","require","micromatch","utils","module","exports","emitter","browserSyncThroughStream","opts","emitted","Transform","reload","objectMode","changed","_transform","file","encoding","next","stream","end","push","match","dot","length","once","emitBrowserReload","emitChangeEvent","basename","_flush","emitStreamChangedEvent"],"sources":["../../lib/public/stream.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}