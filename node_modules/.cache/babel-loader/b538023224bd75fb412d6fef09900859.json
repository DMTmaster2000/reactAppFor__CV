{"ast":null,"code":"var minimatch = require(\"minimatch\");\n\nvar utils = exports;\n\nutils.applyRules = function overwriteBody(rules, body, req, res) {\n  return rules.reduce(function (body, rule) {\n    /**\n     * Try to use the replace string/fn first\n     */\n    if (rule.replace || typeof rule.replace === \"string\") {\n      rule.fn = rule.replace;\n    }\n\n    if (typeof rule.fn === 'string') {\n      return body.replace(rule.match, rule.fn);\n    }\n\n    return body.replace(rule.match, function () {\n      var args = Array.prototype.slice.call(arguments);\n\n      if (typeof rule.fn === 'function') {\n        return rule.fn.apply(this, [req, res].concat(args));\n      }\n\n      return rule.fn;\n    });\n  }, body);\n};\n/**\n * Extensions that will be ignored by default\n * @type {Array}\n */\n\n\nutils.defaultIgnoreTypes = [// text files\n\"js\", \"json\", \"css\", // image files\n\"png\", \"jpg\", \"jpeg\", \"gif\", \"ico\", \"tif\", \"tiff\", \"bmp\", \"webp\", \"psd\", // vector & font\n\"svg\", \"woff\", \"ttf\", \"otf\", \"eot\", \"eps\", \"ps\", \"ai\", // audio\n\"mp3\", \"wav\", \"aac\", \"m4a\", \"m3u\", \"mid\", \"wma\", // video & other media\n\"mpg\", \"mpeg\", \"mp4\", \"m4v\", \"webm\", \"swf\", \"flv\", \"avi\", \"mov\", \"wmv\", // document files\n\"pdf\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"pps\", \"ppt\", \"pptx\", \"odt\", \"ods\", \"odp\", \"pages\", \"key\", \"rtf\", \"txt\", \"csv\", // data files\n\"zip\", \"rar\", \"tar\", \"gz\", \"xml\", \"app\", \"exe\", \"jar\", \"dmg\", \"pkg\", \"iso\"].map(function (ext) {\n  return \"\\\\.\" + ext + \"(\\\\?.*)?$\";\n});\n/**\n * Check if a URL was white-listed\n * @param url\n * @param whitelist\n * @returns {boolean}\n */\n\nutils.isWhitelisted = function isWhitelisted(url, whitelist) {\n  if (whitelist.indexOf(url) > -1) {\n    return true;\n  }\n\n  return whitelist.some(function (pattern) {\n    return minimatch(url, pattern);\n  });\n};\n/**\n * Check if a URL was white-listed with single path\n * @param url\n * @param rules\n * @returns {Array}\n */\n\n\nutils.isWhiteListedForSingle = function isWhiteListedForSingle(url, rules) {\n  return rules.filter(function (item) {\n    return item.paths && utils.isWhitelisted(url, utils.toArray(item.paths));\n  });\n};\n/**\n * Determine if a response should be overwritten\n * @param {String} url\n * @param {Object} opts\n * @returns {boolean}\n */\n\n\nutils.inBlackList = function inBlackList(url, opts) {\n  // First check for an exact match\n  if (!url || opts.blacklist.indexOf(url) > -1) {\n    return true;\n  }\n\n  if (url.length === 1 && url === \"/\") {\n    return false;\n  } // Check the path only\n\n\n  var split = url.split('?')[0]; // second, check that the URL does not contain a\n  // file extension that should be ignored by default\n\n  if (opts.ignore.some(function (pattern) {\n    return new RegExp(pattern).test(split);\n  })) {\n    return true;\n  } // Finally, check any mini-match patterns for paths that have been excluded\n\n\n  if (opts.blacklist.some(function (pattern) {\n    return minimatch(url, pattern);\n  })) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * @param req\n * @returns {Boolean}\n */\n\n\nutils.hasAcceptHeaders = function hasAcceptHeaders(req) {\n  var acceptHeader = req.headers[\"accept\"];\n\n  if (!acceptHeader) {\n    return false;\n  }\n\n  return acceptHeader.indexOf(\"html\") > -1;\n};\n/**\n * @param body\n * @returns {boolean}\n */\n\n\nutils.snip = function snip(body) {\n  if (!body) {\n    return false;\n  }\n};\n\nutils.toArray = function toArray(item) {\n  if (!item) {\n    return item;\n  }\n\n  if (!Array.isArray(item)) {\n    return [item];\n  }\n\n  return item;\n};\n\nutils.isHtml = function isHtml(str) {\n  if (!str) {\n    return false;\n  } // Test to see if start of file contents matches:\n  // - Optional byte-order mark (BOM)\n  // - Zero or more spaces\n  // - Any sort of HTML tag, comment, or doctype tag (basically, <...>)\n\n\n  return /^(\\uFEFF|\\uFFFE)?\\s*<[^>]+>/i.test(str);\n};","map":{"version":3,"names":["minimatch","require","utils","exports","applyRules","overwriteBody","rules","body","req","res","reduce","rule","replace","fn","match","args","Array","prototype","slice","call","arguments","apply","concat","defaultIgnoreTypes","map","ext","isWhitelisted","url","whitelist","indexOf","some","pattern","isWhiteListedForSingle","filter","item","paths","toArray","inBlackList","opts","blacklist","length","split","ignore","RegExp","test","hasAcceptHeaders","acceptHeader","headers","snip","isArray","isHtml","str"],"sources":["/Users/johnberetty/node_modules/resp-modifier/lib/utils.js"],"sourcesContent":["var minimatch = require(\"minimatch\");\nvar utils     = exports;\n\nutils.applyRules = function overwriteBody (rules, body, req, res) {\n    return rules.reduce(function (body, rule) {\n        /**\n         * Try to use the replace string/fn first\n         */\n        if (rule.replace || typeof rule.replace === \"string\") {\n            rule.fn = rule.replace;\n        }\n        if (typeof rule.fn === 'string') {\n            return body.replace(rule.match, rule.fn);\n        }\n        return body.replace(rule.match, function () {\n            var args = Array.prototype.slice.call(arguments);\n            if (typeof rule.fn === 'function') {\n        \t    return rule.fn.apply(this, [req, res].concat(args))\n            }\n            return rule.fn;\n        });\n    }, body);\n};\n\n/**\n * Extensions that will be ignored by default\n * @type {Array}\n */\nutils.defaultIgnoreTypes = [\n    // text files\n    \"js\", \"json\", \"css\",\n    // image files\n    \"png\", \"jpg\", \"jpeg\", \"gif\", \"ico\", \"tif\", \"tiff\", \"bmp\", \"webp\", \"psd\",\n    // vector & font\n    \"svg\", \"woff\", \"ttf\", \"otf\", \"eot\", \"eps\", \"ps\", \"ai\",\n    // audio\n    \"mp3\", \"wav\", \"aac\", \"m4a\", \"m3u\", \"mid\", \"wma\",\n    // video & other media\n    \"mpg\", \"mpeg\", \"mp4\", \"m4v\", \"webm\", \"swf\", \"flv\", \"avi\", \"mov\", \"wmv\",\n    // document files\n    \"pdf\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"pps\", \"ppt\", \"pptx\", \"odt\", \"ods\", \"odp\", \"pages\", \"key\", \"rtf\", \"txt\", \"csv\",\n    // data files\n    \"zip\", \"rar\", \"tar\", \"gz\", \"xml\", \"app\", \"exe\", \"jar\", \"dmg\", \"pkg\", \"iso\"\n].map(function (ext) {\n        return \"\\\\.\" + ext + \"(\\\\?.*)?$\";\n    });\n\n/**\n * Check if a URL was white-listed\n * @param url\n * @param whitelist\n * @returns {boolean}\n */\nutils.isWhitelisted = function isWhitelisted(url, whitelist) {\n\n    if (whitelist.indexOf(url) > -1) {\n        return true;\n    }\n\n    return whitelist.some(function (pattern) {\n        return minimatch(url, pattern);\n    });\n};\n\n/**\n * Check if a URL was white-listed with single path\n * @param url\n * @param rules\n * @returns {Array}\n */\nutils.isWhiteListedForSingle = function isWhiteListedForSingle(url, rules) {\n\n    return rules.filter(function (item) {\n        return item.paths && utils.isWhitelisted(url, utils.toArray(item.paths));\n    });\n};\n\n/**\n * Determine if a response should be overwritten\n * @param {String} url\n * @param {Object} opts\n * @returns {boolean}\n */\nutils.inBlackList = function inBlackList(url, opts) {\n\n    // First check for an exact match\n    if (!url || opts.blacklist.indexOf(url) > -1) {\n        return true;\n    }\n\n    if (url.length === 1 && url === \"/\") {\n        return false;\n    }\n\n    // Check the path only\n    var split = url.split('?')[0];\n\n    // second, check that the URL does not contain a\n    // file extension that should be ignored by default\n    if (opts.ignore.some(function (pattern) {\n            return new RegExp(pattern).test(split);\n        })) {\n        return true;\n    }\n\n    // Finally, check any mini-match patterns for paths that have been excluded\n    if (opts.blacklist.some(function (pattern) {\n            return minimatch(url, pattern);\n        })) {\n        return true;\n    }\n\n    return false;\n};\n\n/**\n * @param req\n * @returns {Boolean}\n */\nutils.hasAcceptHeaders = function hasAcceptHeaders(req) {\n    var acceptHeader = req.headers[\"accept\"];\n    if (!acceptHeader) {\n        return false;\n    }\n    return acceptHeader.indexOf(\"html\") > -1;\n};\n\n/**\n * @param body\n * @returns {boolean}\n */\nutils.snip = function snip(body) {\n    if (!body) {\n        return false;\n    }\n};\n\nutils.toArray = function toArray(item) {\n    if (!item) {\n        return item;\n    }\n    if (!Array.isArray(item)) {\n        return [item];\n    }\n    return item;\n};\n\nutils.isHtml = function isHtml(str) {\n    if (!str) {\n        return false;\n    }\n    // Test to see if start of file contents matches:\n    // - Optional byte-order mark (BOM)\n    // - Zero or more spaces\n    // - Any sort of HTML tag, comment, or doctype tag (basically, <...>)\n    return /^(\\uFEFF|\\uFFFE)?\\s*<[^>]+>/i.test(str);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}