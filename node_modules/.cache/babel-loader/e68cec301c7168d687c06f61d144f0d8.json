{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst copyFileSync = require('./copy-file-sync');\n\nconst mkdir = require('../mkdirs');\n\nfunction copySync(src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {\n      filter: options\n    };\n  }\n\n  options = options || {};\n  options.recursive = !!options.recursive; // default to true for now\n\n  options.clobber = 'clobber' in options ? !!options.clobber : true; // overwrite falls back to clobber\n\n  options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber;\n  options.dereference = 'dereference' in options ? !!options.dereference : false;\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false;\n\n  options.filter = options.filter || function () {\n    return true;\n  }; // Warn about using preserveTimestamps on 32-bit node:\n\n\n  if (options.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`);\n  }\n\n  const stats = options.recursive && !options.dereference ? fs.lstatSync(src) : fs.statSync(src);\n  const destFolder = path.dirname(dest);\n  const destFolderExists = fs.existsSync(destFolder);\n  let performCopy = false;\n\n  if (options.filter instanceof RegExp) {\n    console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function');\n    performCopy = options.filter.test(src);\n  } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest);\n\n  if (stats.isFile() && performCopy) {\n    if (!destFolderExists) mkdir.mkdirsSync(destFolder);\n    copyFileSync(src, dest, {\n      overwrite: options.overwrite,\n      errorOnExist: options.errorOnExist,\n      preserveTimestamps: options.preserveTimestamps\n    });\n  } else if (stats.isDirectory() && performCopy) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest);\n    const contents = fs.readdirSync(src);\n    contents.forEach(content => {\n      const opts = options;\n      opts.recursive = true;\n      copySync(path.join(src, content), path.join(dest, content), opts);\n    });\n  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {\n    const srcPath = fs.readlinkSync(src);\n    fs.symlinkSync(srcPath, dest);\n  }\n}\n\nmodule.exports = copySync;","map":{"version":3,"names":["fs","require","path","copyFileSync","mkdir","copySync","src","dest","options","RegExp","filter","recursive","clobber","overwrite","dereference","preserveTimestamps","process","arch","console","warn","stats","lstatSync","statSync","destFolder","dirname","destFolderExists","existsSync","performCopy","test","isFile","mkdirsSync","errorOnExist","isDirectory","contents","readdirSync","forEach","content","opts","join","isSymbolicLink","srcPath","readlinkSync","symlinkSync","module","exports"],"sources":["/Users/johnberetty/node_modules/fs-extra/lib/copy-sync/copy-sync.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copyFileSync = require('./copy-file-sync')\nconst mkdir = require('../mkdirs')\n\nfunction copySync (src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {filter: options}\n  }\n\n  options = options || {}\n  options.recursive = !!options.recursive\n\n  // default to true for now\n  options.clobber = 'clobber' in options ? !!options.clobber : true\n  // overwrite falls back to clobber\n  options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber\n  options.dereference = 'dereference' in options ? !!options.dereference : false\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false\n\n  options.filter = options.filter || function () { return true }\n\n  // Warn about using preserveTimestamps on 32-bit node:\n  if (options.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`)\n  }\n\n  const stats = (options.recursive && !options.dereference) ? fs.lstatSync(src) : fs.statSync(src)\n  const destFolder = path.dirname(dest)\n  const destFolderExists = fs.existsSync(destFolder)\n  let performCopy = false\n\n  if (options.filter instanceof RegExp) {\n    console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')\n    performCopy = options.filter.test(src)\n  } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest)\n\n  if (stats.isFile() && performCopy) {\n    if (!destFolderExists) mkdir.mkdirsSync(destFolder)\n    copyFileSync(src, dest, {\n      overwrite: options.overwrite,\n      errorOnExist: options.errorOnExist,\n      preserveTimestamps: options.preserveTimestamps\n    })\n  } else if (stats.isDirectory() && performCopy) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)\n    const contents = fs.readdirSync(src)\n    contents.forEach(content => {\n      const opts = options\n      opts.recursive = true\n      copySync(path.join(src, content), path.join(dest, content), opts)\n    })\n  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {\n    const srcPath = fs.readlinkSync(src)\n    fs.symlinkSync(srcPath, dest)\n  }\n}\n\nmodule.exports = copySync\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}