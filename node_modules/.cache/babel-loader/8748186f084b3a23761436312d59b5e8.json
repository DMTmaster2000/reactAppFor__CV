{"ast":null,"code":"var inherits = require('util').inherits;\n\nvar Transform = require('stream').Transform;\n\nvar TokenBucket = require('limiter').TokenBucket;\n/*\n * Throttle is a throttled stream implementing the stream.Transform interface.\n * Options:\n *    rate (mandatory): the throttling rate in bytes per second.\n *    chunksize (optional): the maximum chunk size into which larger writes are decomposed.\n * Any other options are passed to stream.Transform.\n */\n\n\nfunction Throttle(opts, group) {\n  if (group === undefined) group = new ThrottleGroup(opts);\n  this.bucket = group.bucket;\n  this.chunksize = group.chunksize;\n  Transform.call(this, opts);\n}\n\ninherits(Throttle, Transform);\n\nThrottle.prototype._transform = function (chunk, encoding, done) {\n  process(this, chunk, 0, done);\n};\n\nfunction process(self, chunk, pos, done) {\n  var slice = chunk.slice(pos, pos + self.chunksize);\n\n  if (!slice.length) {\n    // chunk fully consumed\n    done();\n    return;\n  }\n\n  self.bucket.removeTokens(slice.length, function (err) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    self.push(slice);\n    process(self, chunk, pos + self.chunksize, done);\n  });\n}\n/*\n * ThrottleGroup throttles an aggregate of streams.\n * Options are the same as for Throttle.\n */\n\n\nfunction ThrottleGroup(opts) {\n  if (!(this instanceof ThrottleGroup)) return new ThrottleGroup(opts);\n  opts = opts || {};\n  if (opts.rate === undefined) throw new Error('throttle rate is a required argument');\n  if (typeof opts.rate !== 'number' || opts.rate <= 0) throw new Error('throttle rate must be a positive number');\n\n  if (opts.chunksize !== undefined && (typeof opts.chunksize !== 'number' || opts.chunksize <= 0)) {\n    throw new Error('throttle chunk size must be a positive number');\n  }\n\n  this.rate = opts.rate;\n  this.chunksize = opts.chunksize || this.rate / 10;\n  this.bucket = new TokenBucket(this.rate, this.rate, 'second', null);\n}\n/*\n * Create a new stream in the throttled group and returns it.\n * Any supplied options are passed to the Throttle constructor.\n */\n\n\nThrottleGroup.prototype.throttle = function (opts) {\n  return new Throttle(opts, this);\n};\n\nmodule.exports = {\n  Throttle: Throttle,\n  ThrottleGroup: ThrottleGroup\n};","map":{"version":3,"names":["inherits","require","Transform","TokenBucket","Throttle","opts","group","undefined","ThrottleGroup","bucket","chunksize","call","prototype","_transform","chunk","encoding","done","process","self","pos","slice","length","removeTokens","err","push","rate","Error","throttle","module","exports"],"sources":["/Users/johnberetty/node_modules/stream-throttle/src/throttle.js"],"sourcesContent":["var inherits = require('util').inherits;\nvar Transform = require('stream').Transform;\nvar TokenBucket = require('limiter').TokenBucket;\n\n/*\n * Throttle is a throttled stream implementing the stream.Transform interface.\n * Options:\n *    rate (mandatory): the throttling rate in bytes per second.\n *    chunksize (optional): the maximum chunk size into which larger writes are decomposed.\n * Any other options are passed to stream.Transform.\n */\nfunction Throttle(opts, group) {\n    if (group === undefined)\n        group = new ThrottleGroup(opts);\n    this.bucket = group.bucket;\n    this.chunksize = group.chunksize;\n    Transform.call(this, opts);\n}\ninherits(Throttle, Transform);\n\nThrottle.prototype._transform = function(chunk, encoding, done) {\n    process(this, chunk, 0, done);\n};\n\nfunction process(self, chunk, pos, done) {\n    var slice = chunk.slice(pos, pos + self.chunksize);\n    if (!slice.length) {\n        // chunk fully consumed\n        done();\n        return;\n    }\n    self.bucket.removeTokens(slice.length, function(err) {\n        if (err) {\n            done(err);\n            return;\n        }\n        self.push(slice);\n        process(self, chunk, pos + self.chunksize, done);\n    });\n}\n\n/*\n * ThrottleGroup throttles an aggregate of streams.\n * Options are the same as for Throttle.\n */\nfunction ThrottleGroup(opts) {\n    if (!(this instanceof ThrottleGroup))\n        return new ThrottleGroup(opts);\n\n    opts = opts || {};\n    if (opts.rate === undefined)\n        throw new Error('throttle rate is a required argument');\n    if (typeof opts.rate !== 'number' || opts.rate <= 0)\n        throw new Error('throttle rate must be a positive number');\n    if (opts.chunksize !== undefined && (typeof opts.chunksize !== 'number' || opts.chunksize <= 0)) {\n        throw new Error('throttle chunk size must be a positive number');\n    }\n\n    this.rate = opts.rate;\n    this.chunksize = opts.chunksize || this.rate/10;\n    this.bucket = new TokenBucket(this.rate, this.rate, 'second', null);\n}\n\n/*\n * Create a new stream in the throttled group and returns it.\n * Any supplied options are passed to the Throttle constructor.\n */\nThrottleGroup.prototype.throttle = function(opts) {\n    return new Throttle(opts, this);\n};\n\nmodule.exports = {\n    Throttle: Throttle,\n    ThrottleGroup: ThrottleGroup\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}