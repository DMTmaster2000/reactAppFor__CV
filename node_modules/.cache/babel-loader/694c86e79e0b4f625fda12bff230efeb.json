{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar http = require('http');\n/**\n * Invoking the library as a function delegates to attach if the first argument\n * is an `http.Server`.\n *\n * If there are no arguments or the first argument is an options object, then\n * a new Server instance is returned.\n *\n * @param {http.Server} server (if specified, will be attached to by the new Server instance)\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\n\nexports = module.exports = function () {\n  // backwards compatible use as `.attach`\n  // if first argument is an http server\n  if (arguments.length && arguments[0] instanceof http.Server) {\n    return attach.apply(this, arguments);\n  } // if first argument is not an http server, then just make a regular eio server\n\n\n  return exports.Server.apply(null, arguments);\n};\n/**\n * Protocol revision number.\n *\n * @api public\n */\n\n\nexports.protocol = 1;\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Server = require('./server');\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = require('./socket');\n/**\n * Expose Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require('./transport');\n/**\n * Expose mutable list of available transports.\n *\n * @api public\n */\n\nexports.transports = require('./transports');\n/**\n * Exports parser.\n *\n * @api public\n */\n\nexports.parser = require('engine.io-parser');\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {Server} websocket.io server\n * @api public\n */\n\nexports.listen = listen;\n\nfunction listen(port, options, fn) {\n  if ('function' === typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  var server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  }); // create engine server\n\n  var engine = exports.attach(server, options);\n  engine.httpServer = server;\n  server.listen(port, fn);\n  return engine;\n}\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\n\nexports.attach = attach;\n\nfunction attach(server, options) {\n  var engine = new exports.Server(options);\n  engine.attach(server, options);\n  return engine;\n}","map":{"version":3,"names":["http","require","exports","module","arguments","length","Server","attach","apply","protocol","Socket","Transport","transports","parser","listen","port","options","fn","server","createServer","req","res","writeHead","end","engine","httpServer"],"sources":["/Users/johnberetty/node_modules/engine.io/lib/engine.io.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar http = require('http');\n\n/**\n * Invoking the library as a function delegates to attach if the first argument\n * is an `http.Server`.\n *\n * If there are no arguments or the first argument is an options object, then\n * a new Server instance is returned.\n *\n * @param {http.Server} server (if specified, will be attached to by the new Server instance)\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports = module.exports = function () {\n  // backwards compatible use as `.attach`\n  // if first argument is an http server\n  if (arguments.length && arguments[0] instanceof http.Server) {\n    return attach.apply(this, arguments);\n  }\n\n  // if first argument is not an http server, then just make a regular eio server\n  return exports.Server.apply(null, arguments);\n};\n\n/**\n * Protocol revision number.\n *\n * @api public\n */\n\nexports.protocol = 1;\n\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Server = require('./server');\n\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = require('./socket');\n\n/**\n * Expose Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require('./transport');\n\n/**\n * Expose mutable list of available transports.\n *\n * @api public\n */\n\nexports.transports = require('./transports');\n\n/**\n * Exports parser.\n *\n * @api public\n */\n\nexports.parser = require('engine.io-parser');\n\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {Server} websocket.io server\n * @api public\n */\n\nexports.listen = listen;\n\nfunction listen (port, options, fn) {\n  if ('function' === typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  var server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  });\n\n  // create engine server\n  var engine = exports.attach(server, options);\n  engine.httpServer = server;\n\n  server.listen(port, fn);\n\n  return engine;\n}\n\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports.attach = attach;\n\nfunction attach (server, options) {\n  var engine = new exports.Server(options);\n  engine.attach(server, options);\n  return engine;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB,YAAY;EACrC;EACA;EACA,IAAIE,SAAS,CAACC,MAAV,IAAoBD,SAAS,CAAC,CAAD,CAAT,YAAwBJ,IAAI,CAACM,MAArD,EAA6D;IAC3D,OAAOC,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBJ,SAAnB,CAAP;EACD,CALoC,CAOrC;;;EACA,OAAOF,OAAO,CAACI,MAAR,CAAeE,KAAf,CAAqB,IAArB,EAA2BJ,SAA3B,CAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;;;AAEAF,OAAO,CAACO,QAAR,GAAmB,CAAnB;AAEA;AACA;AACA;AACA;AACA;;AAEAP,OAAO,CAACI,MAAR,GAAiBL,OAAO,CAAC,UAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACQ,MAAR,GAAiBT,OAAO,CAAC,UAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACS,SAAR,GAAoBV,OAAO,CAAC,aAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACU,UAAR,GAAqBX,OAAO,CAAC,cAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACW,MAAR,GAAiBZ,OAAO,CAAC,kBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACY,MAAR,GAAiBA,MAAjB;;AAEA,SAASA,MAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,EAAhC,EAAoC;EAClC,IAAI,eAAe,OAAOD,OAA1B,EAAmC;IACjCC,EAAE,GAAGD,OAAL;IACAA,OAAO,GAAG,EAAV;EACD;;EAED,IAAIE,MAAM,GAAGlB,IAAI,CAACmB,YAAL,CAAkB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;IACjDA,GAAG,CAACC,SAAJ,CAAc,GAAd;IACAD,GAAG,CAACE,GAAJ,CAAQ,iBAAR;EACD,CAHY,CAAb,CANkC,CAWlC;;EACA,IAAIC,MAAM,GAAGtB,OAAO,CAACK,MAAR,CAAeW,MAAf,EAAuBF,OAAvB,CAAb;EACAQ,MAAM,CAACC,UAAP,GAAoBP,MAApB;EAEAA,MAAM,CAACJ,MAAP,CAAcC,IAAd,EAAoBE,EAApB;EAEA,OAAOO,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtB,OAAO,CAACK,MAAR,GAAiBA,MAAjB;;AAEA,SAASA,MAAT,CAAiBW,MAAjB,EAAyBF,OAAzB,EAAkC;EAChC,IAAIQ,MAAM,GAAG,IAAItB,OAAO,CAACI,MAAZ,CAAmBU,OAAnB,CAAb;EACAQ,MAAM,CAACjB,MAAP,CAAcW,MAAd,EAAsBF,OAAtB;EACA,OAAOQ,MAAP;AACD"},"metadata":{},"sourceType":"script"}