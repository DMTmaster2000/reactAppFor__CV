{"ast":null,"code":"\"use strict\";\n\nvar queryString = require(\"qs\");\n\nvar proto = exports;\nvar instanceMethods = [\"exit\", \"notify\", \"pause\", \"resume\"];\n\nvar getBody = require(\"raw-body\");\n\nvar permittedSocketEvents = [\"file:reload\", \"browser:reload\", \"browser:notify\", \"browser:location\", \"options:set\"];\n/**\n * Does the requested method expect an instance of BrowserSync\n * or raw access to the emitter?\n * @param method\n * @returns {boolean}\n */\n\nfunction methodRequiresInstance(method) {\n  return instanceMethods.indexOf(method) > -1;\n}\n/**\n * Use BrowserSync options + querystring to create a\n * full HTTP/HTTTPS url.\n *\n * Eg. http://localhost:3000/__browser_sync__?method=reload\n * Eg. http://localhost:3000/__browser_sync__?method=reload&args=core.css\n * Eg. http://localhost:3000/__browser_sync__?method=reload&args=core.css&args=core.min\n *\n * @param args\n * @param url\n * @returns {string}\n */\n\n\nproto.getUrl = function (args, url) {\n  return [url, require(\"./config\").httpProtocol.path, \"?\", queryString.stringify(args)].join(\"\");\n};\n/**\n * Return a middleware for handling the requests\n * @param {BrowserSync} bs\n * @returns {Function}\n */\n\n\nproto.middleware = function (bs) {\n  return function (req, res) {\n    if (req.method === \"POST\") {\n      return getBody(req, function (err, body) {\n        if (err) {\n          var output_1 = [\"Error: could not parse JSON.\"];\n          res.writeHead(500, {\n            \"Content-Type\": \"text/plain\"\n          });\n          return res.end(output_1.join(\"\\n\"));\n        }\n\n        try {\n          var _a = JSON.parse(body.toString()),\n              name = _a[0],\n              payload = _a[1];\n\n          bs.io.sockets.emit(name, payload);\n          return res.end(\"Browsersync HTTP Protocol received: \" + name + \" \" + JSON.stringify(payload));\n        } catch (e) {\n          var output_2 = [\"Error: \" + e.message];\n          res.writeHead(500, {\n            \"Content-Type\": \"text/plain\"\n          });\n          return res.end(output_2.join(\"\\n\"));\n        }\n      });\n    }\n\n    var params = queryString.parse(req.url.replace(/^.*\\?/, \"\"));\n    var output;\n\n    if (!Object.keys(params).length) {\n      output = [\"Error: No Parameters were provided.\", \"Example: http://localhost:3000/__browser_sync__?method=reload&args=core.css\"];\n      res.writeHead(500, {\n        \"Content-Type\": \"text/plain\"\n      });\n      res.end(output.join(\"\\n\"));\n      return;\n    }\n\n    try {\n      var bsOrEmitter = methodRequiresInstance(params.method) ? bs : bs.events;\n\n      require(\"./public/\" + params.method)(bsOrEmitter).apply(null, [params.args]);\n\n      output = [\"Called public API method `.%s()`\".replace(\"%s\", params.method), \"With args: \" + JSON.stringify(params.args)];\n      res.end(output.join(\"\\n\"));\n    } catch (e) {\n      res.writeHead(404, {\n        \"Content-Type\": \"text/plain\"\n      });\n      res.write(\"Public API method `\" + params.method + \"` not found.\");\n      res.end();\n      return;\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["queryString","require","proto","exports","instanceMethods","getBody","permittedSocketEvents","methodRequiresInstance","method","indexOf","getUrl","args","url","httpProtocol","path","stringify","join","middleware","bs","req","res","err","body","output_1","writeHead","end","name","payload","io","sockets","emit","JSON","e","output_2","message","params","parse","replace","output","Object","keys","length","bsOrEmitter","events","apply","write"],"sources":["../lib/http-protocol.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}